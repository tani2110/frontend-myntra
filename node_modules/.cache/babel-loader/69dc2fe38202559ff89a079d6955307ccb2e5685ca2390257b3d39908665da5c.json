{"ast":null,"code":"import { configureStore } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport storage from \"redux-persist/lib/storage\";\nimport { persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from \"redux-persist\";\nexport const counterSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    totalPrice: 0\n  },\n  reducers: {\n    Add: (state, action) => {\n      let found = false;\n      let num = 0;\n      for (let product of state.products) {\n        if (product.id == action.payload.id) {\n          found = true;\n          break;\n        }\n        num++;\n      }\n      if (!found) {\n        let newProduct = {\n          ...action.payload,\n          userBid: action.payload.price,\n          // Initialize userBid\n          highestBid: action.payload.price // Initialize highestBid\n        };\n\n        state.products.push(newProduct);\n        state.totalPrice += newProduct.productCount * newProduct.price;\n      } else {\n        state.totalPrice -= state.products[num].productCount * action.payload.price;\n        state.products[num].productCount = action.payload.productCount;\n        state.totalPrice += action.payload.productCount * action.payload.price;\n      }\n    },\n    increment: (state, action) => {\n      state.totalPrice -= state.products[action.payload].productCount * state.products[action.payload].price;\n      state.products[action.payload].productCount++;\n      state.totalPrice += state.products[action.payload].productCount * state.products[action.payload].price;\n    },\n    decrement: (state, action) => {\n      state.totalPrice -= state.products[action.payload].productCount * state.products[action.payload].price;\n      state.products[action.payload].productCount--;\n      state.totalPrice += state.products[action.payload].productCount * state.products[action.payload].price;\n      if (state.products[action.payload].productCount === 0) {\n        state.products.splice(action.payload, 1);\n      }\n    },\n    updateBid: (state, action) => {\n      const {\n        productId,\n        newBid\n      } = action.payload;\n      const productIndex = state.products.findIndex(p => p.id === productId);\n      if (productIndex !== -1) {\n        state.products[productIndex].userBid = newBid;\n        state.totalPrice = newBid; // Update the user's bid\n      }\n    },\n\n    updateHighestBid: (state, action) => {\n      const {\n        productId,\n        newBid\n      } = action.payload;\n      const productIndex = state.products.findIndex(p => p.id === productId);\n      if (productIndex !== -1) {\n        if (state.products[productIndex].highestBid < newBid) state.products[productIndex].highestBid = newBid; // Update the highest bid\n      }\n    },\n\n    Empty: state => {\n      state.products = [];\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    details: []\n  },\n  reducers: {\n    Userr: (state, action) => {\n      state.details.push(action.payload);\n    },\n    Userrr: (state, action) => {\n      state.details = [];\n    }\n  }\n});\nconst persistConfig = {\n  key: \"root\",\n  storage: storage\n};\nexport const rootReducers = combineReducers({\n  cart: counterSlice.reducer,\n  user: userSlice.reducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducers);\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const {\n  Userr\n} = userSlice.actions;\nexport const {\n  Userrr\n} = userSlice.actions;\nexport const {\n  Add,\n  increment,\n  decrement,\n  Empty,\n  updateBid,\n  updateHighestBid\n} = counterSlice.actions;","map":{"version":3,"names":["configureStore","createSlice","setupListeners","combineReducers","storage","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","counterSlice","name","initialState","products","totalPrice","reducers","Add","state","action","found","num","product","id","payload","newProduct","userBid","price","highestBid","push","productCount","increment","decrement","splice","updateBid","productId","newBid","productIndex","findIndex","p","updateHighestBid","Empty","userSlice","details","Userr","Userrr","persistConfig","key","rootReducers","cart","reducer","user","persistedReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","actions"],"sources":["C:/Users/Tanisha Agarwal/Documents/Bits 2nd year/Oops/Jash_project/E-Commerce-Website-main/src/mainApp/pages/store.js"],"sourcesContent":["import { configureStore } from \"@reduxjs/toolkit\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { setupListeners } from \"@reduxjs/toolkit/query\";\nimport { combineReducers } from \"@reduxjs/toolkit\";\nimport storage from \"redux-persist/lib/storage\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\n\nexport const counterSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    totalPrice: 0,\n  },\n  reducers: {\n    Add: (state, action) => {\n      let found = false;\n      let num = 0;\n      for (let product of state.products) {\n        if (product.id == action.payload.id) {\n          found = true;\n          break;\n        }\n        num++;\n      }\n      if (!found) {\n        let newProduct = {\n          ...action.payload,\n          userBid: action.payload.price, // Initialize userBid\n          highestBid: action.payload.price, // Initialize highestBid\n        };\n        state.products.push(newProduct);\n        state.totalPrice += newProduct.productCount * newProduct.price;\n      } else {\n        state.totalPrice -=\n          state.products[num].productCount * action.payload.price;\n        state.products[num].productCount = action.payload.productCount;\n        state.totalPrice += action.payload.productCount * action.payload.price;\n      }\n    },\n    increment: (state, action) => {\n      state.totalPrice -=\n        state.products[action.payload].productCount *\n        state.products[action.payload].price;\n      state.products[action.payload].productCount++;\n      state.totalPrice +=\n        state.products[action.payload].productCount *\n        state.products[action.payload].price;\n    },\n    decrement: (state, action) => {\n      state.totalPrice -=\n        state.products[action.payload].productCount *\n        state.products[action.payload].price;\n      state.products[action.payload].productCount--;\n      state.totalPrice +=\n        state.products[action.payload].productCount *\n        state.products[action.payload].price;\n\n      if (state.products[action.payload].productCount === 0) {\n        state.products.splice(action.payload, 1);\n      }\n    },\n    updateBid: (state, action) => {\n      const { productId, newBid } = action.payload;\n      const productIndex = state.products.findIndex((p) => p.id === productId);\n      if (productIndex !== -1) {\n        state.products[productIndex].userBid = newBid;\n\n        state.totalPrice = newBid; // Update the user's bid\n      }\n    },\n    updateHighestBid: (state, action) => {\n      const { productId, newBid } = action.payload;\n      const productIndex = state.products.findIndex((p) => p.id === productId);\n      if (productIndex !== -1) {\n        if (state.products[productIndex].highestBid < newBid)\n          state.products[productIndex].highestBid = newBid; // Update the highest bid\n      }\n    },\n\n    Empty: (state) => {\n      state.products = [];\n      state.totalPrice = 0;\n    },\n  },\n});\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    details: [],\n  },\n  reducers: {\n    Userr: (state, action) => {\n      state.details.push(action.payload);\n    },\n    Userrr: (state, action) => {\n      state.details = [];\n    },\n  },\n});\n\nconst persistConfig = {\n  key: \"root\",\n  storage: storage,\n};\n\nexport const rootReducers = combineReducers({\n  cart: counterSlice.reducer,\n  user: userSlice.reducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducers);\n\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const { Userr } = userSlice.actions;\nexport const { Userrr } = userSlice.actions;\nexport const { Add, increment, decrement, Empty, updateBid, updateHighestBid } =\n  counterSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}