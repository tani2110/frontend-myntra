{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query';\nimport { combineReducers } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nexport const counterSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    products: [],\n    totalPrice: 0\n  },\n  reducers: {\n    Add: (state, action) => {\n      let found = false;\n      let num = 0;\n      for (let product of state.products) {\n        if (product.id == action.payload.id) {\n          found = true;\n          break;\n        }\n        num++;\n      }\n      if (!found) {\n        state.products.push(action.payload);\n        state.totalPrice += action.payload.productCount * action.payload.price;\n      } else {\n        state.totalPrice -= state.products[num].productCount * action.payload.price;\n        state.products[num].productCount = action.payload.productCount;\n        state.totalPrice += action.payload.productCount * action.payload.price;\n      }\n    },\n    increment: (state, action) => {\n      state.totalPrice -= state.products[action.payload].productCount * state.products[action.payload].price;\n      state.products[action.payload].productCount++;\n      state.totalPrice += state.products[action.payload].productCount * state.products[action.payload].price;\n    },\n    decrement: (state, action) => {\n      state.totalPrice -= state.products[action.payload].productCount * state.products[action.payload].price;\n      state.products[action.payload].productCount--;\n      state.totalPrice += state.products[action.payload].productCount * state.products[action.payload].price;\n      if (state.products[action.payload].productCount === 0) {\n        state.products.splice(action.payload, 1);\n      }\n    },\n    Empty: state => {\n      state.products = [];\n      state.totalPrice = 0;\n    }\n  }\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    details: []\n  },\n  reducers: {\n    Userr: (state, action) => {\n      state.details.push(action.payload);\n    },\n    Userrr: (state, action) => {\n      state.details = [];\n    }\n  }\n});\nconst persistConfig = {\n  key: 'root',\n  storage: storage\n};\nexport const rootReducers = combineReducers({\n  cart: counterSlice.reducer,\n  user: userSlice.reducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducers);\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  })\n});\nexport const {\n  Userr\n} = userSlice.actions;\nexport const {\n  Userrr\n} = userSlice.actions;\nexport const {\n  Add,\n  increment,\n  decrement,\n  Empty\n} = counterSlice.actions;","map":{"version":3,"names":["configureStore","createSlice","setupListeners","combineReducers","storage","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","counterSlice","name","initialState","products","totalPrice","reducers","Add","state","action","found","num","product","id","payload","push","productCount","price","increment","decrement","splice","Empty","userSlice","details","Userr","Userrr","persistConfig","key","rootReducers","cart","reducer","user","persistedReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","actions"],"sources":["C:/Users/Tanisha Agarwal/Documents/Bits 2nd year/Oops/Jash_project/E-Commerce-Website-main/src/mainApp/pages/store.js"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport { createSlice } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport { combineReducers } from '@reduxjs/toolkit'\nimport storage from 'redux-persist/lib/storage'\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist'\n\nexport const counterSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    products: [],\n    totalPrice : 0,\n  },\n  reducers: {\n    Add : (state, action) => {\n      let found = false;\n      let num = 0;\n      for(let product of state.products)\n      {\n        if(product.id == action.payload.id)\n        {\n            found = true;\n            break;\n        }\n        num++;\n      }\n      if(!found)\n      {\n        state.products.push(action.payload);\n        state.totalPrice+= action.payload.productCount*action.payload.price;\n      }\n      else\n      {\n        state.totalPrice-= state.products[num].productCount*(action.payload.price);\n        state.products[num].productCount = action.payload.productCount;\n        state.totalPrice+= action.payload.productCount*action.payload.price;\n\n      }\n    },\n    increment:(state,action) =>{\n      state.totalPrice-=(state.products[action.payload].productCount*state.products[action.payload].price);\n      state.products[action.payload].productCount++;\n      state.totalPrice+=(state.products[action.payload].productCount*state.products[action.payload].price);\n\n    },\n    decrement: (state,action) =>{\n      state.totalPrice-=(state.products[action.payload].productCount*state.products[action.payload].price);\n      state.products[action.payload].productCount--;\n      state.totalPrice+=(state.products[action.payload].productCount*state.products[action.payload].price);\n      \n      if(state.products[action.payload].productCount === 0)\n      {\n          state.products.splice(action.payload, 1);\n      }\n      \n    },\n\n    Empty: (state) => {\n      state.products = [];\n      state.totalPrice = 0;\n    }\n  },\n})\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    details: [],\n  },\n  reducers: {\n    Userr : (state, action) => {\n      state.details.push(action.payload);\n    },\n    Userrr : (state, action) => {\n      state.details = [];\n    }\n  },\n})\n\nconst persistConfig = {\n  key:'root',\n  storage: storage,\n}\n\nexport const rootReducers = combineReducers({\n  cart: counterSlice.reducer,\n  user: userSlice.reducer\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducers)\n\n\nexport default configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n        getDefaultMiddleware({\n            serializableCheck: {\n                ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n            },\n        }),\n})\n\n\nexport const {Userr} = userSlice.actions;\nexport const {Userrr} = userSlice.actions;\nexport const { Add,increment, decrement, Empty} = counterSlice.actions;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}